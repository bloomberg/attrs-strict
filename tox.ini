[tox]
envlist =
        py27,
        py36,
        py37,
        py38,
        pypy,
        pypy3,
        coverage,
        fix_lint,
        docs,
        package_description,
minversion = 3.7
isolated_build = true
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {basepython}
setenv = PIP_DISABLE_VERSION_CHECK = 1
         COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
passenv = http_proxy https_proxy no_proxy SSL_CERT_FILE PYTEST_*
deps =
    pytest
    pytest-cov
    py{27,py}: mock
    py{27,py}: typing

changedir = tests
commands = python -m pytest \
           --cov attrs_strict \
           --cov-config "{toxinidir}/tox.ini" \
           --junitxml {toxworkdir}/junit.{envname}.xml \
           {posargs:.}

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
basepython = python3.7
deps =
     sphinx
commands = sphinx-build -d "{toxworkdir}/docs_doctree" "{toxinidir}/doc" "{toxworkdir}/docs_out" --color -W -bhtml {posargs}
           python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "docs_out" / "index.html"))'

[testenv:package_description]
changedir = {toxinidir}
description = check that the long description is valid
basepython = python3.7
deps = twine >= 1.12.1
       readme-renderer[md] >= 24.0
       pep517
skip_install = true
commands = python -m pep517.build -s -b . -o {envtmpdir}
           twine check {envtmpdir}/*

[testenv:pypi_publish]
changedir = {toxinidir}
description = Upload a new package to pypi
deps = twine >= 1.12.1
       pep517
passenv = TWINE_PASSWORD https_proxy no_proxy
skip_install = true
commands = python -m pep517.build -s -b . -o {envtmpdir}
           twine upload --verbose -u __token__ {envtmpdir}/*

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
basepython = python3.7
changedir = {toxinidir}
passenv = {[testenv]passenv}
          # without PROGRAMDATA cloning using git for Windows will fail with an
          # `error setting certificate verify locations` error
          PROGRAMDATA
deps = pre-commit >= 1.14.4, < 2
skip_install = True
commands = pre-commit run --all-files --show-diff-on-failure
           python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[isort]
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
line_length = 80
known_first_party = attrs_strict,tests
known_third_party = attr,pytest,setuptools

[flake8]
max-complexity = 22
max-line-length = 80

[pep8]
max-line-length = 80

[coverage:run]
branch = true
parallel = true

[coverage:report]
skip_covered = True
show_missing = True
exclude_lines =
    \#\s*pragma: no cover
    ^\s*raise AssertionError\b
    ^\s*raise NotImplementedError\b
    ^\s*return NotImplemented\b
    ^\s*raise$
    ^if __name__ == ['"]__main__['"]:$

[coverage:paths]
source = attrs_strict
         */.tox/*/lib/python*/site-packages/attrs_strict
         */.tox/pypy*/site-packages/attrs_strict
         */.tox\*\Lib\site-packages\attrs_strict
         */attrs_strict
         *\attrs_strict
